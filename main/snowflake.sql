use database flight_data;
create or replace database flight_insights;

CREATE or replace TABLE FLIGHT_INSIGHTS.PUBLIC.FLIGHTS (
    TRIP_ID VARCHAR,
    FLIGHT_TYPE VARCHAR,
    FLIGHT_NO VARCHAR,
    CARRIER VARCHAR,
    OPERATING_AIRLINE VARCHAR,
    OPERATING_AIRLINE_NAME VARCHAR,
    ORIGIN VARCHAR,
    DESTINATION VARCHAR,
    ORIGIN_CITY_NAME VARCHAR,
    DESTINATION_CITY_NAME VARCHAR,
    AIRPORT_NAME_ORIGIN VARCHAR,
    AIRPORT_NAME_DESTINATION VARCHAR,
    DEPARTURE VARCHAR,
    ARRIVAL VARCHAR,
    DURATION VARCHAR,
    STOPS VARCHAR,
    AIRCRAFT_CODE VARCHAR,
    AIRCRAFT_NAME VARCHAR,
    CABIN VARCHAR,
    BOOKING_CLASS VARCHAR,
    FARE_CONDITIONS VARCHAR,
    CHECKED_BAGS VARCHAR,
    BASE_PRICE VARCHAR,
    TOTAL_PRICE VARCHAR,
    FLIGHT_DISTANCE_KM VARCHAR,
    LAST_TICKETING_DATE VARCHAR,
    SEGMENT_CABIN_TYPE VARCHAR,
    SOURCE VARCHAR,
    FARE_BASIS VARCHAR
);

CREATE or replace TABLE FLIGHT_INSIGHTS.PUBLIC.WEATHER (
    LOCATION_ID VARCHAR,
    IATA_CODE VARCHAR,
    LOCATION_TYPE VARCHAR,
    LATITUDE VARCHAR,
    LONGITUDE VARCHAR,
    FETCH_TIMESTAMP VARCHAR,
    VISIBILITY VARCHAR,
    WIND_SPEED VARCHAR,
    WIND_GUST VARCHAR,
    WIND_DIRECTION VARCHAR,
    RAIN VARCHAR,
    SNOW VARCHAR,
    WEATHER_DESCRIPTION VARCHAR,
    TEMPERATURE VARCHAR,
    PRESSURE VARCHAR,
    HUMIDITY VARCHAR,
    CLOUDINESS VARCHAR,
    SUNRISE VARCHAR,
    SUNSET VARCHAR,
    EVENT_TIME VARCHAR,
    DEPARTURE_DATE VARCHAR
);

CREATE TABLE IF NOT EXISTS FLIGHT_INSIGHTS.PUBLIC.PRICING (
    OFFER_ID VARCHAR,
    BASE_FARE FLOAT,
    TOTAL_FARE FLOAT,
    CURRENCY VARCHAR,
    TAXES VARCHAR,
    FEES VARCHAR 
);

CREATE TABLE IF NOT EXISTS FLIGHT_INSIGHTS.PUBLIC.ITINERARIES (
    OFFER_ID VARCHAR,
    ITINERARY_TYPE VARCHAR,
    TOTAL_DURATION VARCHAR,
    NUMBER_OF_STOPS INTEGER,
    DEPARTURE_AIRPORT VARCHAR,
    ARRIVAL_AIRPORT VARCHAR,
    TOTAL_PRICE FLOAT,
    CURRENCY VARCHAR
);

CREATE TABLE IF NOT EXISTS FLIGHT_INSIGHTS.PUBLIC.AIRCRAFT (
    AIRCRAFT_CODE VARCHAR,
    AIRCRAFT_TYPE VARCHAR
);

CREATE TABLE IF NOT EXISTS FLIGHT_INSIGHTS.PUBLIC.AIRPORTS (
    AIRPORT_CODE VARCHAR,
    AIRPORT_NAME VARCHAR,
    CITY VARCHAR,
    COUNTRY VARCHAR,
    LATITUDE FLOAT,
    LONGITUDE FLOAT,
    LOCATION_TYPE VARCHAR
);

SHOW SCHEMAS IN DATABASE flight_insights;

SHOW GRANTS TO USER MASTER;

GRANT CREATE STAGE ON SCHEMA flight_insights.public TO ROLE ACCOUNTADMIN;

use role accountadmin;

GRANT USAGE ON SCHEMA FLIGHT_INSIGHTS.PUBLIC TO USER MASTER;
GRANT SELECT, INSERT ON ALL TABLES IN SCHEMA FLIGHT_INSIGHTS.PUBLIC TO USER MASTER;

create schema silver;
drop schema flight_insights;
select * from FLIGHT_INSIGHTS.PUBLIC.WEATHER;
select * from FLIGHT_INSIGHTS.SILVER.FLIGHTS_CLEAN;
select * from FLIGHT_INSIGHTS.SILVER.WEATHER_CLEAN;

create schema gold;
CREATE OR REPLACE TABLE DIM_AIRPORT (
    IATA_CODE VARCHAR PRIMARY KEY,
    CITY_NAME VARCHAR,
    AIRPORT_NAME VARCHAR
);

INSERT INTO DIM_AIRPORT
SELECT DISTINCT
    ORIGIN AS IATA_CODE,
    ORIGIN_CITY_NAME AS CITY_NAME,
    AIRPORT_NAME_ORIGIN AS AIRPORT_NAME
FROM FLIGHT_INSIGHTS.SILVER.FLIGHTS_CLEAN
UNION
SELECT DISTINCT
    DESTINATION,
    DESTINATION_CITY_NAME,
    AIRPORT_NAME_DESTINATION
FROM FLIGHT_INSIGHTS.SILVER.FLIGHTS_CLEAN;

select * from FLIGHT_INSIGHTS.GOLD.DIM_AIRPORT;

CREATE OR REPLACE TABLE DIM_AIRLINE (
    CARRIER_CODE VARCHAR PRIMARY KEY,
    AIRLINE_NAME VARCHAR
);

INSERT INTO DIM_AIRLINE
SELECT DISTINCT
    OPERATING_AIRLINE AS CARRIER_CODE,
    OPERATING_AIRLINE_NAME AS AIRLINE_NAME
FROM FLIGHT_INSIGHTS.SILVER.FLIGHTS_CLEAN;

select * from FLIGHT_INSIGHTS.GOLD.DIM_AIRLINE;


CREATE OR REPLACE TABLE DIM_AIRCRAFT (
    AIRCRAFT_CODE VARCHAR PRIMARY KEY,
    AIRCRAFT_NAME VARCHAR
);

INSERT INTO DIM_AIRCRAFT
SELECT DISTINCT
    AIRCRAFT_CODE,
    AIRCRAFT_NAME
FROM FLIGHT_INSIGHTS.SILVER.FLIGHTS_CLEAN;

select * from FLIGHT_INSIGHTS.GOLD.DIM_AIRCRAFT;

CREATE OR REPLACE TABLE DIM_DATE (
    DATE_KEY DATE PRIMARY KEY,
    YEAR INT,
    MONTH INT,
    DAY INT,
    DAY_NAME VARCHAR,
    WEEKDAY_FLAG BOOLEAN
);

INSERT INTO DIM_DATE
SELECT DISTINCT
    CAST(TO_TIMESTAMP(DEPARTURE) AS DATE) AS DATE_KEY,
    EXTRACT(YEAR FROM TO_TIMESTAMP(DEPARTURE)) AS YEAR,
    EXTRACT(MONTH FROM TO_TIMESTAMP(DEPARTURE)) AS MONTH,
    EXTRACT(DAY FROM TO_TIMESTAMP(DEPARTURE)) AS DAY,
    TO_CHAR(TO_TIMESTAMP(DEPARTURE), 'DY') AS DAY_NAME,
    CASE WHEN TO_CHAR(TO_TIMESTAMP(DEPARTURE), 'DY') IN ('SAT', 'SUN') THEN TRUE ELSE FALSE END AS IS_WEEKEND
FROM FLIGHT_INSIGHTS.SILVER.FLIGHTS_CLEAN
UNION
SELECT DISTINCT
    CAST(TO_TIMESTAMP(ARRIVAL) AS DATE) AS DATE_KEY,
    EXTRACT(YEAR FROM TO_TIMESTAMP(ARRIVAL)) AS YEAR,
    EXTRACT(MONTH FROM TO_TIMESTAMP(ARRIVAL)) AS MONTH,
    EXTRACT(DAY FROM TO_TIMESTAMP(ARRIVAL)) AS DAY,
    TO_CHAR(TO_TIMESTAMP(ARRIVAL), 'DY') AS DAY_NAME,
    CASE WHEN TO_CHAR(TO_TIMESTAMP(ARRIVAL), 'DY') IN ('SAT', 'SUN') THEN TRUE ELSE FALSE END AS IS_WEEKEND
FROM FLIGHT_INSIGHTS.SILVER.FLIGHTS_CLEAN;

select * from FLIGHT_INSIGHTS.GOLD.DIM_DATE;

CREATE OR REPLACE TABLE FACT_FLIGHT_SEGMENTS (
    TRIP_ID VARCHAR,
    FLIGHT_NO VARCHAR,
    CARRIER_CODE VARCHAR,
    ORIGIN VARCHAR,
    DESTINATION VARCHAR,
    DEPARTURE TIMESTAMP,
    ARRIVAL TIMESTAMP,
    STOPS INT,
    AIRCRAFT_CODE VARCHAR,
    FARE_CONDITIONS VARCHAR,
    CHECKED_BAGS INT,
    BASE_PRICE FLOAT,
    TOTAL_PRICE FLOAT,
    FLIGHT_DISTANCE_KM FLOAT,
    LAST_TICKETING_DATE DATE,
    SOURCE VARCHAR
);

INSERT INTO FACT_FLIGHT_SEGMENTS
SELECT
    TRIP_ID,
    FLIGHT_NO,
    OPERATING_AIRLINE,
    ORIGIN,
    DESTINATION,
    DEPARTURE,
    ARRIVAL,
    STOPS,
    AIRCRAFT_CODE,
    FARE_CONDITIONS,
    CHECKED_BAGS,
    BASE_PRICE,
    TOTAL_PRICE,
    FLIGHT_DISTANCE_KM,
    LAST_TICKETING_DATE,
    SOURCE
FROM FLIGHT_INSIGHTS.SILVER.FLIGHTS_CLEAN;


select * from FLIGHT_INSIGHTS.GOLD.FACT_FLIGHT_SEGMENTS;

CREATE OR REPLACE TABLE DIM_WEATHER (
    LOCATION_ID VARCHAR,
    IATA_CODE VARCHAR,
    LATITUDE FLOAT,
    LONGITUDE FLOAT,
    FETCH_TIMESTAMP TIMESTAMP,
    VISIBILITY INT,
    WIND_SPEED FLOAT,
    WIND_GUST FLOAT,
    WIND_DIRECTION FLOAT,
    WEATHER_DESCRIPTION VARCHAR,
    TEMPERATURE FLOAT,
    PRESSURE INT,
    HUMIDITY INT,
    CLOUDINESS INT,
    SUNRISE TIMESTAMP,
    SUNSET TIMESTAMP,
    EVENT_TIME TIMESTAMP
);

INSERT INTO DIM_WEATHER
SELECT
    LOCATION_ID,
    IATA_CODE,
    LATITUDE,
    LONGITUDE,
    FETCH_TIMESTAMP,
    VISIBILITY,
    WIND_SPEED,
    WIND_GUST,
    WIND_DIRECTION,
    WEATHER_DESCRIPTION,
    TEMPERATURE,
    PRESSURE,
    HUMIDITY,
    CLOUDINESS,
    SUNRISE,
    SUNSET,
    EVENT_TIME;
select * FROM FLIGHT_INSIGHTS.SILVER.WEATHER_CLEAN;
select * from FLIGHT_INSIGHTS.SILVER.FLIGHTS_CLEAN;

select * from FLIGHT_INSIGHTS.GOLD.DIM_WEATHER;

CREATE schema gold_layer;

select * from FLIGHT_INSIGHTS.SILVER.FLIGHTS_CLEAN;
select * from FLIGHT_INSIGHTS.GOLD_LAYER.DIM_AIRPORT;
select * from FLIGHT_INSIGHTS.GOLD_LAYER.DIM_AIRCRAFT;
select * from FLIGHT_INSIGHTS.GOLD_LAYER.DIM_AIRLINE;
select * from FLIGHT_INSIGHTS.GOLD_LAYER.DIM_DATE;
select * from FLIGHT_INSIGHTS.GOLD_LAYER.DIM_WEATHER;
select * from FLIGHT_INSIGHTS.GOLD_LAYER.FACT_FLIGHT_SEGMENTS;

create schema bronze_db;

select * from FLIGHT_INSIGHTS.PUBLIC.FLIGHTS;
select * from FLIGHT_INSIGHTS.PUBLIC.WEATHER;

CREATE OR REPLACE PROCEDURE FLIGHT_INSIGHTS.GOLD_LAYER.CREATE_VIEWS_FOR_GOLD_LAYER()
RETURNS STRING
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS
$$
try {
    var tableQuery = `
        SELECT TABLE_NAME 
        FROM FLIGHT_INSIGHTS.INFORMATION_SCHEMA.TABLES 
        WHERE TABLE_SCHEMA = 'GOLD_LAYER' 
        AND TABLE_TYPE = 'BASE TABLE';
    `;
    var tableStmt=snowflake.createStatement({sqlText: tableQuery});
    var tableResult=tableStmt.execute();
    var resultMessage="View creation results:\n";
    while (tableResult.next()) {
        var tableName = tableResult.getColumnValue(1);
        var viewName = "vw_" + tableName;
        var createViewSql = `
            CREATE OR REPLACE VIEW FLIGHT_INSIGHTS.GOLD_LAYER.${viewName}
            AS
            SELECT * FROM FLIGHT_INSIGHTS.GOLD_LAYER.${tableName};
        `;   
        try {
            var createStmt = snowflake.createStatement({sqlText: createViewSql});
            createStmt.execute();
            resultMessage += `Successfully created view ${viewName} for table ${tableName}.\n`;
        } catch (viewErr) {
            resultMessage += `Failed to create view ${viewName} for table ${tableName}. Error: ${viewErr.message}\n`;
        }
    }
    if (!tableResult.getRowCount()) {
        resultMessage += "No tables found in FLIGHT_INSIGHTS.GOLD_LAYER.\n";
    }
    return resultMessage;
} catch (err) {
    return `Error in stored procedure: ${err.message}`;
}
$$;

-- Call the stored procedure to create the views
CALL FLIGHT_INSIGHTS.GOLD_LAYER.CREATE_VIEWS_FOR_GOLD_LAYER();

select current_region();
select current_account();

select * from FLIGHT_INSIGHTS.GOLD_LAYER.VW_DIM_AIRCRAFT;
select * from FLIGHT_INSIGHTS.GOLD_LAYER.VW_DIM_AIRLINE;
select * from FLIGHT_INSIGHTS.GOLD_LAYER.VW_DIM_AIRPORT;
select * from FLIGHT_INSIGHTS.GOLD_LAYER.VW_DIM_DATE;
select * from FLIGHT_INSIGHTS.GOLD_LAYER.VW_DIM_WEATHER;
select * from FLIGHT_INSIGHTS.GOLD_LAYER.VW_FACT_FLIGHT_SEGMENTS;


CREATE OR REPLACE VIEW FLIGHT_INSIGHTS.GOLD_Layer.VW_ROUTE_MAP_DATA AS
WITH LEG1 AS (
    SELECT 
        TRIP_ID,
        ORIGIN AS LEG_START,
        DESTINATION AS STOPOVER,
        ARRIVAL AS ARRIVAL_TIME
    FROM FLIGHT_INSIGHTS.GOLD_Layer.FACT_FLIGHT_SEGMENTS
),
LEG2 AS (
    SELECT 
        TRIP_ID,
        ORIGIN AS STOPOVER,
        DESTINATION AS LEG_END,
        DEPARTURE AS DEPARTURE_TIME
    FROM FLIGHT_INSIGHTS.GOLD_Layer.FACT_FLIGHT_SEGMENTS
)
SELECT 
    L1.TRIP_ID,
    L1.LEG_START,
    L1.STOPOVER,
    L2.LEG_END,
    L1.ARRIVAL_TIME,
    L2.DEPARTURE_TIME
FROM LEG1 L1
JOIN LEG2 L2
  ON L1.TRIP_ID = L2.TRIP_ID
  AND L1.STOPOVER = L2.STOPOVER
  AND L1.ARRIVAL_TIME < L2.DEPARTURE_TIME;

select * from FLIGHT_INSIGHTS.GOLD_LAYER.VW_ROUTE_MAP_DATA;


CREATE VIEW FLIGHT_INSIGHTS.GOLD_LAYER.VW_AIRLINE_ROUTES AS
SELECT 
    TRIP_ID,
    LEG_START AS FROM_IATA,
    STOPOVER AS TO_IATA
FROM FLIGHT_INSIGHTS.GOLD_LAYER.VW_ROUTE_MAP_DATA
UNION
SELECT 
    TRIP_ID,
    STOPOVER AS FROM_IATA,
    LEG_END AS TO_IATA
FROM FLIGHT_INSIGHTS.GOLD_LAYER.VW_ROUTE_MAP_DATA;

select * from FLIGHT_INSIGHTS.GOLD_LAYER.VW_AIRLINE_ROUTES;


create or replace view FLIGHT_INSIGHTS.GOLD_LAYER.VW_WEEKDAY_FLIGHT_PERFORMANCE as
SELECT
    F.CARRIER_CODE,
    A.AIRLINE_NAME,
    D.WEEKDAY_FLAG AS IS_WEEKEND,
    COUNT(*) AS TOTAL_FLIGHTS,
    ROUND(AVG(F.TOTAL_PRICE), 2) AS AVG_TICKET_PRICE,
    ROUND(SUM(F.TOTAL_PRICE), 2) AS TOTAL_REVENUE,
    ROUND(AVG(F.FLIGHT_DISTANCE_KM), 2) AS AVG_DISTANCE_KM,
    ROUND(SUM(F.FLIGHT_DISTANCE_KM), 2) AS TOTAL_DISTANCE_KM
FROM FLIGHT_INSIGHTS.GOLD_LAYER.FACT_FLIGHT_SEGMENTS F
JOIN FLIGHT_INSIGHTS.GOLD_LAYER.DIM_DATE D
    ON CAST(F.DEPARTURE AS DATE) = D.DATE_KEY
JOIN FLIGHT_INSIGHTS.GOLD_LAYER.DIM_AIRLINE A
    ON F.CARRIER_CODE = A.CARRIER_CODE
GROUP BY F.CARRIER_CODE, A.AIRLINE_NAME, D.WEEKDAY_FLAG
ORDER BY A.AIRLINE_NAME, D.WEEKDAY_FLAG;

create or replace view FLIGHT_INSIGHTS.GOLD_LAYER.VW_FLIGHTS_WEATHER_EXPOSURE as
SELECT
    F.TRIP_ID,
    F.FLIGHT_NO,
    F.CARRIER_CODE,
    A.AIRLINE_NAME,
    F.ORIGIN,
    F.DEPARTURE,
    W.EVENT_TIME,
    W.WIND_SPEED,
    W.CLOUDINESS,
    W.HUMIDITY,
    W.VISIBILITY,
    
    CASE 
        WHEN W.WIND_SPEED > 5.4 THEN 1 ELSE 0 
    END AS HIGH_WIND_FLAG,

    CASE 
        WHEN W.CLOUDINESS > 90 THEN 1 ELSE 0 
    END AS HIGH_CLOUD_FLAG,

    CASE 
        WHEN W.HUMIDITY > 71 THEN 1 ELSE 0 
    END AS HIGH_HUMIDITY_FLAG,

    CASE 
        WHEN W.VISIBILITY < 9500 THEN 1 ELSE 0 
    END AS LOW_VISIBILITY_FLAG,

    CASE 
        WHEN W.WIND_SPEED > 5.4 OR W.CLOUDINESS > 90 OR W.HUMIDITY > 71 OR W.VISIBILITY < 9500 
        THEN 'Yes' 
        ELSE 'No' 
    END AS IS_ADVERSE_WEATHER

FROM FLIGHT_INSIGHTS.GOLD_LAYER.FACT_FLIGHT_SEGMENTS F
JOIN FLIGHT_INSIGHTS.GOLD_LAYER.DIM_AIRLINE A
    ON F.CARRIER_CODE = A.CARRIER_CODE
JOIN FLIGHT_INSIGHTS.GOLD_LAYER.DIM_WEATHER W
    ON F.ORIGIN = W.IATA_CODE 
    AND CAST(F.DEPARTURE AS DATE) = CAST(W.EVENT_TIME AS DATE);

select * from FLIGHT_INSIGHTS.GOLD_LAYER.VW_FLIGHTS_WEATHER_EXPOSURE;
select * from FLIGHT_INSIGHTS.GOLD_LAYER.VW_DIM_WEATHER;
select * from FLIGHT_INSIGHTS.GOLD_LAYER.VW_DIM_DATE;

SELECT 
    c.DAY_NAME,
    c.WEEKDAY_FLAG,
    COUNT(r.TRIP_ID) AS FLIGHT_COUNT
FROM FLIGHT_INSIGHTS.GOLD_LAYER.VW_DIM_DATE c
LEFT JOIN FLIGHT_INSIGHTS.GOLD_LAYER.VW_FACT_FLIGHT_SEGMENTS r
    ON c.DATE_KEY = r.DEPARTURE
WHERE c.DATE_KEY BETWEEN '2025-06-13' AND '2025-06-18'
GROUP BY c.DAY_NAME, c.WEEKDAY_FLAG
ORDER BY c.DATE_KEY;

select * from FLIGHT_INSIGHTS.GOLD_LAYER.VW_DIM_DATE;

CREATE OR REPLACE VIEW FLIGHT_INSIGHTS.GOLD_LAYER.VW_FLIGHT_COUNT_BY_DAY AS;
SELECT 
    c.DAY_NAME,
    c.WEEKDAY_FLAG,
    COUNT(r.TRIP_ID) AS FLIGHT_COUNT,
    c.DATE_KEY AS SORT_DATE
FROM FLIGHT_INSIGHTS.GOLD_LAYER.VW_DIM_DATE c
LEFT JOIN FLIGHT_INSIGHTS.GOLD_LAYER.VW_FACT_FLIGHT_SEGMENTS r
    ON c.DATE_KEY = DATE_TRUNC('DAY', r.DEPARTURE)
WHERE c.DATE_KEY BETWEEN '2025-06-13' AND '2025-06-18'
GROUP BY c.DAY_NAME, c.WEEKDAY_FLAG, c.DATE_KEY
ORDER BY c.DATE_KEY;

select * from FLIGHT_INSIGHTS.GOLD_LAYER.VW_FACT_FLIGHT_SEGMENTS;


CREATE OR REPLACE PROCEDURE FLIGHT_INSIGHTS.GOLD_LAYER.CREATE_VIEWS_FOR_GOLD_LAYER()
RETURNS STRING
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS
$$
try {
    var resultMessage = "View creation results:\n";
    var tableQuery = `
        SELECT TABLE_NAME 
        FROM FLIGHT_INSIGHTS.INFORMATION_SCHEMA.TABLES 
        WHERE TABLE_SCHEMA = 'GOLD_LAYER' 
        AND TABLE_TYPE = 'BASE TABLE';
    `;
    var tableStmt = snowflake.createStatement({sqlText: tableQuery});
    var tableResult = tableStmt.execute();
    while (tableResult.next()) {
        var tableName = tableResult.getColumnValue(1);
        var viewName = "VW_" + tableName;
        var createViewSql = `
            CREATE OR REPLACE VIEW FLIGHT_INSIGHTS.GOLD_LAYER.${viewName}
            AS
            SELECT * FROM FLIGHT_INSIGHTS.GOLD_LAYER.${tableName};
        `;
        try {
            var createStmt = snowflake.createStatement({sqlText: createViewSql});
            createStmt.execute();
            resultMessage += `Successfully created view ${viewName} for table ${tableName}.\n`;
        } catch (viewErr) {
            resultMessage += `Failed to create view ${viewName} for table ${tableName}. Error: ${viewErr.message}\n`;
        }
    }
    if (!tableResult.getRowCount()) {
        resultMessage += "No base tables found in FLIGHT_INSIGHTS.GOLD_LAYER.\n";
    }
    var routeMapSql = `
        CREATE OR REPLACE VIEW FLIGHT_INSIGHTS.GOLD_LAYER.VW_ROUTE_MAP_DATA AS
        WITH LEG1 AS (
            SELECT 
                TRIP_ID,
                ORIGIN AS LEG_START,
                DESTINATION AS STOPOVER,
                ARRIVAL AS ARRIVAL_TIME
            FROM FLIGHT_INSIGHTS.GOLD_LAYER.FACT_FLIGHT_SEGMENTS
        ),
        LEG2 AS (
            SELECT 
                TRIP_ID,
                ORIGIN AS STOPOVER,
                DESTINATION AS LEG_END,
                DEPARTURE AS DEPARTURE_TIME
            FROM FLIGHT_INSIGHTS.GOLD_LAYER.FACT_FLIGHT_SEGMENTS
        )
        SELECT 
            L1.TRIP_ID,
            L1.LEG_START,
            L1.STOPOVER,
            L2.LEG_END,
            L1.ARRIVAL_TIME,
            L2.DEPARTURE_TIME
        FROM LEG1 L1
        JOIN LEG2 L2
          ON L1.TRIP_ID = L2.TRIP_ID
          AND L1.STOPOVER = L2.STOPOVER
          AND L1.ARRIVAL_TIME < L2.DEPARTURE_TIME;
    `;
    try {
        var routeMapStmt = snowflake.createStatement({sqlText: routeMapSql});
        routeMapStmt.execute();
        resultMessage += `Successfully created view VW_ROUTE_MAP_DATA.\n`;
    } catch (err) {
        resultMessage += `Failed to create view VW_ROUTE_MAP_DATA. Error: ${err.message}\n`;
    }
    var airlineRoutesSql = `
        CREATE OR REPLACE VIEW FLIGHT_INSIGHTS.GOLD_LAYER.VW_AIRLINE_ROUTES AS
        SELECT 
            TRIP_ID,
            LEG_START AS FROM_IATA,
            STOPOVER AS TO_IATA
        FROM FLIGHT_INSIGHTS.GOLD_LAYER.VW_ROUTE_MAP_DATA
        UNION
        SELECT 
            TRIP_ID,
            STOPOVER AS FROM_IATA,
            LEG_END AS TO_IATA
        FROM FLIGHT_INSIGHTS.GOLD_LAYER.VW_ROUTE_MAP_DATA;
    `;
    try {
        var airlineRoutesStmt = snowflake.createStatement({sqlText: airlineRoutesSql});
        airlineRoutesStmt.execute();
        resultMessage += `Successfully created view VW_AIRLINE_ROUTES.\n`;
    } catch (err) {
        resultMessage += `Failed to create view VW_AIRLINE_ROUTES. Error: ${err.message}\n`;
    }
    var weekdayPerformanceSql = `
        CREATE OR REPLACE VIEW FLIGHT_INSIGHTS.GOLD_LAYER.VW_WEEKDAY_FLIGHT_PERFORMANCE AS
        SELECT
            F.CARRIER_CODE,
            A.AIRLINE_NAME,
            D.WEEKDAY_FLAG AS IS_WEEKEND,
            COUNT(*) AS TOTAL_FLIGHTS,
            ROUND(AVG(F.TOTAL_PRICE), 2) AS AVG_TICKET_PRICE,
            ROUND(SUM(F.TOTAL_PRICE), 2) AS TOTAL_REVENUE,
            ROUND(AVG(F.FLIGHT_DISTANCE_KM), 2) AS AVG_DISTANCE_KM,
            ROUND(SUM(F.FLIGHT_DISTANCE_KM), 2) AS TOTAL_DISTANCE_KM
        FROM FLIGHT_INSIGHTS.GOLD_LAYER.FACT_FLIGHT_SEGMENTS F
        JOIN FLIGHT_INSIGHTS.GOLD_LAYER.DIM_DATE D
            ON CAST(F.DEPARTURE AS DATE) = D.DATE_KEY
        JOIN FLIGHT_INSIGHTS.GOLD_LAYER.DIM_AIRLINE A
            ON F.CARRIER_CODE = A.CARRIER_CODE
        GROUP BY F.CARRIER_CODE, A.AIRLINE_NAME, D.WEEKDAY_FLAG
        ORDER BY A.AIRLINE_NAME, D.WEEKDAY_FLAG;
    `;
    try {
        var weekdayPerformanceStmt = snowflake.createStatement({sqlText: weekdayPerformanceSql});
        weekdayPerformanceStmt.execute();
        resultMessage += `Successfully created view VW_WEEKDAY_FLIGHT_PERFORMANCE.\n`;
    } catch (err) {
        resultMessage += `Failed to create view VW_WEEKDAY_FLIGHT_PERFORMANCE. Error: ${err.message}\n`;
    }

    // View 4: VW_FLIGHTS_WEATHER_EXPOSURE
    var flightsWeatherSql = `
        CREATE OR REPLACE VIEW FLIGHT_INSIGHTS.GOLD_LAYER.VW_FLIGHTS_WEATHER_EXPOSURE AS
        SELECT
            F.TRIP_ID,
            F.FLIGHT_NO,
            F.CARRIER_CODE,
            A.AIRLINE_NAME,
            F.ORIGIN,
            F.DEPARTURE,
            W.EVENT_TIME,
            W.WIND_SPEED,
            W.CLOUDINESS,
            W.HUMIDITY,
            W.VISIBILITY,
            CASE 
                WHEN W.WIND_SPEED > 5.4 THEN 1 ELSE 0 
            END AS HIGH_WIND_FLAG,
            CASE 
                WHEN W.CLOUDINESS > 90 THEN 1 ELSE 0 
            END AS HIGH_CLOUD_FLAG,
            CASE 
                WHEN W.HUMIDITY > 71 THEN 1 ELSE 0 
            END AS HIGH_HUMIDITY_FLAG,
            CASE 
                WHEN W.VISIBILITY < 9500 THEN 1 ELSE 0 
            END AS LOW_VISIBILITY_FLAG,
            CASE 
                WHEN W.WIND_SPEED > 5.4 OR W.CLOUDINESS > 90 OR W.HUMIDITY > 71 OR W.VISIBILITY < 9500 
                THEN 'Yes' 
                ELSE 'No' 
            END AS IS_ADVERSE_WEATHER
        FROM FLIGHT_INSIGHTS.GOLD_LAYER.FACT_FLIGHT_SEGMENTS F
        JOIN FLIGHT_INSIGHTS.GOLD_LAYER.DIM_AIRLINE A
            ON F.CARRIER_CODE = A.CARRIER_CODE
        JOIN FLIGHT_INSIGHTS.GOLD_LAYER.DIM_WEATHER W
            ON F.ORIGIN = W.IATA_CODE 
            AND CAST(F.DEPARTURE AS DATE) = CAST(W.EVENT_TIME AS DATE);
    `;
    try {
        var flightsWeatherStmt = snowflake.createStatement({sqlText: flightsWeatherSql});
        flightsWeatherStmt.execute();
        resultMessage += `Successfully created view VW_FLIGHTS_WEATHER_EXPOSURE.\n`;
    } catch (err) {
        resultMessage += `Failed to create view VW_FLIGHTS_WEATHER_EXPOSURE. Error: ${err.message}\n`;
    }
    var flightCountSql = `
        CREATE OR REPLACE VIEW FLIGHT_INSIGHTS.GOLD_LAYER.VW_FLIGHT_COUNT_BY_DAY AS
        SELECT 
            c.DAY_NAME,
            c.WEEKDAY_FLAG,
            COUNT(r.TRIP_ID) AS FLIGHT_COUNT,
            c.DATE_KEY AS SORT_DATE
        FROM FLIGHT_INSIGHTS.GOLD_LAYER.VW_DIM_DATE c
        LEFT JOIN FLIGHT_INSIGHTS.GOLD_LAYER.VW_FACT_FLIGHT_SEGMENTS r
            ON c.DATE_KEY = DATE_TRUNC('DAY', r.DEPARTURE)
        WHERE c.DATE_KEY BETWEEN '2025-06-13' AND '2025-06-18'
        GROUP BY c.DAY_NAME, c.WEEKDAY_FLAG, c.DATE_KEY
        ORDER BY c.DATE_KEY;
    `;
    try {
        var flightCountStmt = snowflake.createStatement({sqlText: flightCountSql});
        flightCountStmt.execute();
        resultMessage += `Successfully created view VW_FLIGHT_COUNT_BY_DAY.\n`;
    } catch (err) {
        resultMessage += `Failed to create view VW_FLIGHT_COUNT_BY_DAY. Error: ${err.message}\n`;
    }

    return resultMessage;
} catch (err) {
    return `Error in stored procedure: ${err.message}`;
}
$$;
CALL FLIGHT_INSIGHTS.GOLD_LAYER.CREATE_VIEWS_FOR_GOLD_LAYER();

select * from FLIGHT_INSIGHTS.GOLD_LAYER.VW_DIM_WEATHER;
select * from FLIGHT_INSIGHTS.GOLD_LAYER.VW_FACT_FLIGHT_SEGMENTS;